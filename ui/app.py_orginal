from flask import Flask, redirect, url_for, session, render_template, jsonify, request
from flask_session import Session
from authlib.integrations.flask_client import OAuth
from dotenv import load_dotenv
from user_agents import parse
import mysql.connector
import os
import requests

# Lade Umgebungsvariablen
load_dotenv()

app = Flask(__name__)
app.secret_key = os.getenv("FLASK_SECRET_KEY")

# Sitzung konfigurieren
app.config["SESSION_TYPE"] = "filesystem"
app.config["SESSION_PERMANENT"] = False
Session(app)

# Auth0-Konfiguration
oauth = OAuth(app)
auth0 = oauth.register(
    'auth0',
    client_id=os.getenv('AUTH0_CLIENT_ID'),
    client_secret=os.getenv('AUTH0_CLIENT_SECRET'),
    api_base_url=f'https://{os.getenv("AUTH0_DOMAIN")}',
    access_token_url=f'https://{os.getenv("AUTH0_DOMAIN")}/oauth/token',
    authorize_url=f'https://{os.getenv("AUTH0_DOMAIN")}/authorize',
    jwks_uri=f'https://{os.getenv("AUTH0_DOMAIN")}/.well-known/jwks.json',
    client_kwargs={
        'scope': 'openid profile email',
        'audience': os.getenv('AUTH0_AUDIENCE')
    },
)

def get_db_connection():
    return mysql.connector.connect(
        host='localhost',
        user='esp_user',
        password='esp_password',
        database='esp_data'
    )

@app.route('/')
def home():
    return render_template('home.html')

@app.route('/login')
def login():
    return auth0.authorize_redirect(redirect_uri=os.getenv('AUTH0_CALLBACK_URL'))

@app.route('/callback')
def callback():
    token = auth0.authorize_access_token()
    user_info = auth0.get('userinfo').json()
    session['user'] = user_info

    auth0_sub = user_info.get('sub')
    email = user_info.get('email')
    first_name = user_info.get('given_name', 'Unbekannt')
    last_name = user_info.get('family_name', 'Unbekannt')

    # Verbindung zur Datenbank herstellen
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)

    # Überprüfen, ob der Benutzer bereits existiert
    cursor.execute("SELECT id FROM users WHERE auth0_sub = %s", (auth0_sub,))
    result = cursor.fetchone()

    # Benutzer zur Tabelle hinzufügen, falls er noch nicht existiert
    if not result:
        cursor.execute(
            "INSERT INTO users (auth0_sub, email, first_name, last_name) VALUES (%s, %s, %s, %s)",
            (auth0_sub, email, first_name, last_name)
        )
        conn.commit()
        cursor.execute("SELECT id FROM users WHERE auth0_sub = %s", (auth0_sub,))
        result = cursor.fetchone()

    user_id = result['id']

    # Anmeldeinformationen sammeln und in `user_logins` speichern
    ip_address = request.remote_addr
    user_agent = parse(request.user_agent.string)
    browser = user_agent.browser.family
    os = user_agent.os.family
    city, country = get_location_from_ip(ip_address)

    cursor.execute(
        "INSERT INTO user_logins (user_id, ip_address, browser, os, city, country) VALUES (%s, %s, %s, %s, %s, %s)",
        (user_id, ip_address, browser, os, city, country)
    )
    conn.commit()
    cursor.close()
    conn.close()
    
    return redirect('/dashboard')

def get_location_from_ip(ip_address):
    # API-Anfrage für Standortdetails (z.B. ip-api.com)
    try:
        response = requests.get(f'http://ip-api.com/json/{ip_address}')
        if response.status_code == 200:
            data = response.json()
            city = data.get('city', 'Unbekannt')
            country = data.get('country', 'Unbekannt')
            return city, country
    except:
        return "Unbekannt", "Unbekannt"
    return "Unbekannt", "Unbekannt"

@app.route('/dashboard')
def dashboard():
    user = session.get('user')
    if not user:
        return redirect('/login')
    return render_template('dashboard.html', user=user)

@app.route('/logout')
def logout():
    session.clear()
    return redirect(f'https://{os.getenv("AUTH0_DOMAIN")}/v2/logout?client_id={os.getenv("AUTH0_CLIENT_ID")}&returnTo={url_for("home", _external=True)}')

# API-Endpunkt für registrierte Geräte anzeigen
@app.route('/meine_geraete')
def meine_geraete():
    return render_template('meine_geraete.html')

@app.route('/api/my_devices')
def my_devices():
    user = session.get('user')
    if not user:
        return jsonify({'error': 'Unauthorized'}), 401

    auth0_sub = user.get('sub')
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT id FROM users WHERE auth0_sub = %s", (auth0_sub,))
    result = cursor.fetchone()
    
    if not result:
        return jsonify({'error': 'Benutzer nicht gefunden'}), 404
    
    user_id = result['id']
    cursor.execute("SELECT id, mac_address, hostname FROM user_devices WHERE user_id = %s", (user_id,))
    devices = cursor.fetchall()
    cursor.close()
    conn.close()

    return jsonify({'devices': devices})

# API-Endpunkt zum Hinzufügen eines neuen Geräts
@app.route('/api/add_device', methods=['POST'])
def add_device():
    user = session.get('user')
    if not user:
        return jsonify({'error': 'Unauthorized'}), 401

    mac_address = request.json.get('mac_address')
    hostname = request.json.get('hostname')
    auth0_sub = user.get('sub')

    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)

    # Überprüfe, ob die MAC-Adresse bereits registriert ist
    cursor.execute("SELECT * FROM user_devices WHERE mac_address = %s", (mac_address,))
    existing_device = cursor.fetchone()

    if existing_device:
        return jsonify({'error': 'Dieses Gerät ist bereits bei einem anderen Konto registriert'}), 400

    # Benutzer-ID anhand der Auth0-Sub-ID abrufen
    cursor.execute("SELECT id FROM users WHERE auth0_sub = %s", (auth0_sub,))
    result = cursor.fetchone()
    if not result:
        return jsonify({'error': 'Benutzer nicht gefunden'}), 404

    user_id = result['id']

    # Neues Gerät hinzufügen mit MAC-Adresse und Hostname
    cursor.execute(
        "INSERT INTO user_devices (user_id, mac_address, hostname) VALUES (%s, %s, %s)",
        (user_id, mac_address, hostname)
    )
    conn.commit()
    cursor.close()
    conn.close()
    return jsonify({'success': True})

# API-Endpunkt zum Löschen eines Geräts
@app.route('/api/delete_device', methods=['POST'])
def delete_device():
    user = session.get('user')
    if not user:
        return jsonify({'error': 'Unauthorized'}), 401

    device_id = request.json.get('device_id')
    auth0_sub = user.get('sub')
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    
    cursor.execute("SELECT id FROM users WHERE auth0_sub = %s", (auth0_sub,))
    result = cursor.fetchone()
    if not result:
        return jsonify({'error': 'Benutzer nicht gefunden'}), 404
    
    user_id = result['id']
    cursor.execute("DELETE FROM user_devices WHERE id = %s AND user_id = %s", (device_id, user_id))
    conn.commit()
    cursor.close()
    conn.close()

    return jsonify({'success': True})

# API-Endpunkt für Bewegungsdaten-Chart basierend auf der ausgewählten MAC-Adresse
@app.route('/api/motion_chart_data')
def motion_chart_data():
    user = session.get('user')
    if not user:
        return jsonify({'error': 'Unauthorized'}), 401

    mac_address = request.args.get('mac_address')
    if not mac_address:
        return jsonify({'error': 'MAC-Adresse fehlt'}), 400

    auth0_sub = user.get('sub')
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)

    cursor.execute("SELECT id FROM users WHERE auth0_sub = %s", (auth0_sub,))
    result = cursor.fetchone()
    if not result:
        return jsonify({'error': 'Benutzer nicht gefunden'}), 404

    user_id = result['id']
    
    cursor.execute("SELECT mac_address FROM user_devices WHERE user_id = %s", (user_id,))
    user_macs = [device['mac_address'] for device in cursor.fetchall()]
    if mac_address not in user_macs:
        return jsonify({'error': 'Unbefugter Zugriff auf Gerät'}), 403

    cursor.execute("""
        SELECT event_date, COUNT(*) AS movement_count 
        FROM motion_events 
        WHERE mac_address = %s 
        GROUP BY event_date
        ORDER BY event_date
    """, (mac_address,))

    motion_data = cursor.fetchall()
    cursor.close()
    conn.close()

    data = {
        'labels': [row['event_date'].strftime('%Y-%m-%d') for row in motion_data],
        'data': [row['movement_count'] for row in motion_data]
    }
    return jsonify(data)

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5100)

